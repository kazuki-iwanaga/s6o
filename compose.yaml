services:
  webapp:
    container_name: webapp
    build:
      context: ./webapp
      dockerfile: Dockerfile
    ports:
      - $WEBAPP_PORT:$WEBAPP_PORT
    volumes:
      - /app/node_modules
      - ./webapp:/app
    working_dir: /app
    command: npx remix vite:dev --host 0.0.0.0 --port $WEBAPP_PORT
  hasura-db:
    container_name: hasura-db
    image: postgres:$HASURA_POSTGRES_VERSION
    restart: always
    shm_size: 128mb
    environment:
      POSTGRES_USER: $HASURA_POSTGRES_USER
      POSTGRES_PASSWORD: $HASURA_POSTGRES_PASSWORD
      POSTGRES_DB: $HASURA_POSTGRES_DB
      PGPORT: $HASURA_POSTGRES_PORT
  hasura:
    # https://hasura.io/docs/2.0/getting-started/docker-simple/
    container_name: hasura
    image: hasura/graphql-engine:v$HASURA_VERSION
    ports:
      - $HASURA_PORT:$HASURA_PORT
    restart: always
    environment:
      HASURA_GRAPHQL_SERVER_PORT: $HASURA_PORT
      ## postgres database to store Hasura metadata
      HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://$HASURA_POSTGRES_USER:$HASURA_POSTGRES_PASSWORD@hasura-db:$HASURA_POSTGRES_PORT/$HASURA_POSTGRES_DB
      ## this env var can be used to add the above postgres database to Hasura as a data source. this can be removed/updated based on your needs
      PG_DATABASE_URL: postgres://$HASURA_POSTGRES_USER:$HASURA_POSTGRES_PASSWORD@hasura-db:$HASURA_POSTGRES_PORT/$HASURA_POSTGRES_DB
      ## enable the console served by server
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
      ## enable debugging mode. It is recommended to disable this in production
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
      ## uncomment next line to run console offline (i.e load console assets from server instead of CDN)
      # HASURA_GRAPHQL_CONSOLE_ASSETS_DIR: /srv/console-assets
      ## uncomment next line to set an admin secret
      # HASURA_GRAPHQL_ADMIN_SECRET: myadminsecretkey
    depends_on:
      - hasura-db
  flagsmith-db:
    container_name: flagsmith-db
    image: postgres:$FLAGSMITH_POSTGRES_VERSION
    restart: always
    shm_size: 128mb
    environment:
      POSTGRES_USER: $FLAGSMITH_POSTGRES_USER
      POSTGRES_PASSWORD: $FLAGSMITH_POSTGRES_PASSWORD
      POSTGRES_DB: $FLAGSMITH_POSTGRES_DB
      PGPORT: $FLAGSMITH_POSTGRES_PORT
  flagsmith:
    # https://github.com/Flagsmith/flagsmith/blob/main/docker-compose.yml
    container_name: flagsmith
    image: flagsmith.docker.scarf.sh/flagsmith/flagsmith:$FLAGSMITH_VERSION
    environment:
      # All environments variables are available here:
      # API: https://docs.flagsmith.com/deployment/locally-api#environment-variables
      # UI: https://docs.flagsmith.com/deployment/locally-frontend#environment-variables
      DATABASE_URL: postgres://$FLAGSMITH_POSTGRES_USER:$FLAGSMITH_POSTGRES_PASSWORD@flagsmith-db:$FLAGSMITH_POSTGRES_PORT/$FLAGSMITH_POSTGRES_DB
      USE_POSTGRES_FOR_ANALYTICS: 'true' # Store API and Flag Analytics data in Postgres
      # ENVIRONMENT: production # local(default), dev, staging or production
      DJANGO_ALLOWED_HOSTS: '*' # Change this in production
      ALLOW_ADMIN_INITIATION_VIA_CLI: 'true' # Change this in production
      FLAGSMITH_DOMAIN: localhost:8000 # Change this in production
      DJANGO_SECRET_KEY: secret # Change this in production
      ENABLE_ADMIN_ACCESS_USER_PASS: 'true'
      # PREVENT_SIGNUP: 'true' # Uncomment to prevent additional signups
      # ALLOW_REGISTRATION_WITHOUT_INVITE: 'true'
    ports:
      - $FLAGSMITH_PORT:8000
    depends_on:
      - flagsmith-db
  otelcol:
    # https://opentelemetry.io/docs/collector/installation/#docker-compose
    container_name: otelcol
    image: otel/opentelemetry-collector-contrib:$OTELCOL_VERSION
    volumes:
      - ./otelcol.yaml:/etc/otelcol-contrib/config.yaml
    environment:
      - OTELCOL_GRPC_PORT=$OTELCOL_GRPC_PORT
      - OTELCOL_HTTP_PORT=$OTELCOL_HTTP_PORT
      - O2_GRPC_PORT=$O2_GRPC_PORT
      - O2_AUTH_TOKEN=$O2_AUTH_TOKEN
      - O2_ORG=$O2_ORG
      - O2_STREAM=$O2_STREAM
    depends_on:
      - o2
  o2:
    # https://openobserve.ai/docs/guide/quickstart/#self-hosted-installation
    container_name: o2
    image: public.ecr.aws/zinclabs/openobserve:v$O2_VERSION
    ports:
      - $O2_HTTP_PORT:$O2_HTTP_PORT
    environment:
      - ZO_ROOT_USER_EMAIL=$O2_USER
      - ZO_ROOT_USER_PASSWORD=$O2_PASSWORD
      - ZO_HTTP_PORT=$O2_HTTP_PORT
      - ZO_GRPC_PORT=$O2_GRPC_PORT
      # Send anonymous telemetry info for improving OpenObserve. You can disable by set it to false
      - ZO_TELEMETRY=false